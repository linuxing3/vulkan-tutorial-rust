
image png1 = file("16-swapchain-recreation.png");
image png2 = file("18-vertex-buffer.png");
image png3 = file("20-index-buffer.png");
image png4 = file("22-descriptor-sets.png");
image png5 = file("25-texture-mapping.png");
image png6 = file("29-multi-sampling.png");

const float tile_width  = 1.0 / 3.0;
const float tile_height = 1.0 / 2.0;

const int output_width  = 2400;
const int output_height = 1200;

glsl vec4 CombineImages(vec2 pos) {
    vec4 sample = vec4(1.0);
    
    if (pos.x < tile_width && pos.y > tile_height) {
        float tex_x = pos.x / tile_width;
        float tex_y = (pos.y - tile_height) / tile_height;

        sample = texture(png1, vec2(tex_x, tex_y));
    } else if (pos.x < tile_width * 2 && pos.y > tile_height) {
        float tex_x = (pos.x - tile_width) / tile_width;
        float tex_y = (pos.y - tile_height) / tile_height;

        sample = texture(png2, vec2(tex_x, tex_y));
    } else if (pos.x < 1.0 && pos.y > tile_height) {
        float tex_x = (pos.x - tile_width * 2) / tile_width;
        float tex_y = (pos.y - tile_height) / tile_height;

        sample = texture(png3, vec2(tex_x, tex_y));
    } else if (pos.x < tile_width && pos.y < tile_height) {
        float tex_x = pos.x / tile_width;
        float tex_y = pos.y / tile_height;

        sample = texture(png4, vec2(tex_x, tex_y));
    } else if (pos.x < tile_width * 2 && pos.y < tile_height) {
        float tex_x = (pos.x - tile_width) / tile_width;
        float tex_y = pos.y / tile_height;

        sample = texture(png5, vec2(tex_x, tex_y));
    } else if (pos.x < 1.0 && pos.y < tile_height) {
        float tex_x = (pos.x - tile_width * 2) / tile_width;
        float tex_y = pos.y / tile_height;

        sample = texture(png6, vec2(tex_x, tex_y));
    }

    return sample;
}

image Output = glsl(CombineImages, output_width, output_height);
